{"ast":null,"code":"// src/backend/controllers/userController.js\nconst User = require('../models/User');\nconst bcrypt = require('bcryptjs');\nexports.signup = async (req, res) => {\n  // Extract data from request body\n  const {\n    email,\n    password,\n    name,\n    postCode,\n    address\n  } = req.body;\n  try {\n    // Hash password for security\n    const hashedPassword = await bcrypt.hash(password, 12);\n\n    // Create a new user instance\n    const user = new User({\n      email,\n      password: hashedPassword,\n      name,\n      postCode,\n      address\n    });\n\n    // Save the user to the database\n    const result = await user.save();\n\n    // Respond with success message and the user ID\n    res.status(201).json({\n      userId: result._id,\n      message: 'User created!'\n    });\n  } catch (error) {\n    // Handle errors (like duplicate email)\n    res.status(500).json({\n      message: 'Error creating user'\n    });\n  }\n};\nexports.login = async (req, res) => {\n  // Extract login credentials from request body\n  const {\n    email,\n    password\n  } = req.body;\n  try {\n    // Find the user by email\n    const user = await User.findOne({\n      email\n    });\n    if (!user) {\n      return res.status(401).json({\n        message: 'Authentication failed'\n      });\n    }\n\n    // Check if password matches\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) {\n      return res.status(401).json({\n        message: 'Authentication failed'\n      });\n    }\n\n    // Respond with the user ID (Session management not included)\n    res.status(200).json({\n      userId: user._id\n    });\n  } catch (error) {\n    // Handle potential errors\n    res.status(500).json({\n      message: 'Error logging in'\n    });\n  }\n};\nexports.updatePassword = async (req, res) => {\n  // Extract user ID and new password from request body\n  const {\n    userId,\n    newPassword\n  } = req.body;\n  try {\n    // Find the user by ID\n    const user = await User.findById(userId);\n    if (!user) {\n      return res.status(404).json({\n        message: 'User not found'\n      });\n    }\n\n    // Hash the new password\n    const hashedPassword = await bcrypt.hash(newPassword, 12);\n\n    // Update the user's password\n    user.password = hashedPassword;\n    await user.save();\n\n    // Respond with success message\n    res.status(200).json({\n      message: 'Password updated successfully'\n    });\n  } catch (error) {\n    // Handle potential errors\n    res.status(500).json({\n      message: 'Error updating password'\n    });\n  }\n};","map":{"version":3,"names":["User","require","bcrypt","exports","signup","req","res","email","password","name","postCode","address","body","hashedPassword","hash","user","result","save","status","json","userId","_id","message","error","login","findOne","isMatch","compare","updatePassword","newPassword","findById"],"sources":["C:/Users/Admin/Downloads/eat-at-home/src/UpdatePassword.js"],"sourcesContent":["// src/backend/controllers/userController.js\r\nconst User = require('../models/User');\r\nconst bcrypt = require('bcryptjs');\r\n\r\nexports.signup = async (req, res) => {\r\n  // Extract data from request body\r\n  const { email, password, name, postCode, address } = req.body;\r\n\r\n  try {\r\n    // Hash password for security\r\n    const hashedPassword = await bcrypt.hash(password, 12);\r\n\r\n    // Create a new user instance\r\n    const user = new User({\r\n      email,\r\n      password: hashedPassword,\r\n      name,\r\n      postCode,\r\n      address\r\n    });\r\n\r\n    // Save the user to the database\r\n    const result = await user.save();\r\n\r\n    // Respond with success message and the user ID\r\n    res.status(201).json({ userId: result._id, message: 'User created!' });\r\n  } catch (error) {\r\n    // Handle errors (like duplicate email)\r\n    res.status(500).json({ message: 'Error creating user' });\r\n  }\r\n};\r\n\r\nexports.login = async (req, res) => {\r\n  // Extract login credentials from request body\r\n  const { email, password } = req.body;\r\n\r\n  try {\r\n    // Find the user by email\r\n    const user = await User.findOne({ email });\r\n    if (!user) {\r\n      return res.status(401).json({ message: 'Authentication failed' });\r\n    }\r\n\r\n    // Check if password matches\r\n    const isMatch = await bcrypt.compare(password, user.password);\r\n    if (!isMatch) {\r\n      return res.status(401).json({ message: 'Authentication failed' });\r\n    }\r\n\r\n    // Respond with the user ID (Session management not included)\r\n    res.status(200).json({ userId: user._id });\r\n  } catch (error) {\r\n    // Handle potential errors\r\n    res.status(500).json({ message: 'Error logging in' });\r\n  }\r\n};\r\n\r\nexports.updatePassword = async (req, res) => {\r\n  // Extract user ID and new password from request body\r\n  const { userId, newPassword } = req.body;\r\n\r\n  try {\r\n    // Find the user by ID\r\n    const user = await User.findById(userId);\r\n    if (!user) {\r\n      return res.status(404).json({ message: 'User not found' });\r\n    }\r\n\r\n    // Hash the new password\r\n    const hashedPassword = await bcrypt.hash(newPassword, 12);\r\n\r\n    // Update the user's password\r\n    user.password = hashedPassword;\r\n    await user.save();\r\n\r\n    // Respond with success message\r\n    res.status(200).json({ message: 'Password updated successfully' });\r\n  } catch (error) {\r\n    // Handle potential errors\r\n    res.status(500).json({ message: 'Error updating password' });\r\n  }\r\n};\r\n"],"mappings":"AAAA;AACA,MAAMA,IAAI,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AACtC,MAAMC,MAAM,GAAGD,OAAO,CAAC,UAAU,CAAC;AAElCE,OAAO,CAACC,MAAM,GAAG,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACnC;EACA,MAAM;IAAEC,KAAK;IAAEC,QAAQ;IAAEC,IAAI;IAAEC,QAAQ;IAAEC;EAAQ,CAAC,GAAGN,GAAG,CAACO,IAAI;EAE7D,IAAI;IACF;IACA,MAAMC,cAAc,GAAG,MAAMX,MAAM,CAACY,IAAI,CAACN,QAAQ,EAAE,EAAE,CAAC;;IAEtD;IACA,MAAMO,IAAI,GAAG,IAAIf,IAAI,CAAC;MACpBO,KAAK;MACLC,QAAQ,EAAEK,cAAc;MACxBJ,IAAI;MACJC,QAAQ;MACRC;IACF,CAAC,CAAC;;IAEF;IACA,MAAMK,MAAM,GAAG,MAAMD,IAAI,CAACE,IAAI,CAAC,CAAC;;IAEhC;IACAX,GAAG,CAACY,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,MAAM,EAAEJ,MAAM,CAACK,GAAG;MAAEC,OAAO,EAAE;IAAgB,CAAC,CAAC;EACxE,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd;IACAjB,GAAG,CAACY,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEG,OAAO,EAAE;IAAsB,CAAC,CAAC;EAC1D;AACF,CAAC;AAEDnB,OAAO,CAACqB,KAAK,GAAG,OAAOnB,GAAG,EAAEC,GAAG,KAAK;EAClC;EACA,MAAM;IAAEC,KAAK;IAAEC;EAAS,CAAC,GAAGH,GAAG,CAACO,IAAI;EAEpC,IAAI;IACF;IACA,MAAMG,IAAI,GAAG,MAAMf,IAAI,CAACyB,OAAO,CAAC;MAAElB;IAAM,CAAC,CAAC;IAC1C,IAAI,CAACQ,IAAI,EAAE;MACT,OAAOT,GAAG,CAACY,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEG,OAAO,EAAE;MAAwB,CAAC,CAAC;IACnE;;IAEA;IACA,MAAMI,OAAO,GAAG,MAAMxB,MAAM,CAACyB,OAAO,CAACnB,QAAQ,EAAEO,IAAI,CAACP,QAAQ,CAAC;IAC7D,IAAI,CAACkB,OAAO,EAAE;MACZ,OAAOpB,GAAG,CAACY,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEG,OAAO,EAAE;MAAwB,CAAC,CAAC;IACnE;;IAEA;IACAhB,GAAG,CAACY,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,MAAM,EAAEL,IAAI,CAACM;IAAI,CAAC,CAAC;EAC5C,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd;IACAjB,GAAG,CAACY,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEG,OAAO,EAAE;IAAmB,CAAC,CAAC;EACvD;AACF,CAAC;AAEDnB,OAAO,CAACyB,cAAc,GAAG,OAAOvB,GAAG,EAAEC,GAAG,KAAK;EAC3C;EACA,MAAM;IAAEc,MAAM;IAAES;EAAY,CAAC,GAAGxB,GAAG,CAACO,IAAI;EAExC,IAAI;IACF;IACA,MAAMG,IAAI,GAAG,MAAMf,IAAI,CAAC8B,QAAQ,CAACV,MAAM,CAAC;IACxC,IAAI,CAACL,IAAI,EAAE;MACT,OAAOT,GAAG,CAACY,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEG,OAAO,EAAE;MAAiB,CAAC,CAAC;IAC5D;;IAEA;IACA,MAAMT,cAAc,GAAG,MAAMX,MAAM,CAACY,IAAI,CAACe,WAAW,EAAE,EAAE,CAAC;;IAEzD;IACAd,IAAI,CAACP,QAAQ,GAAGK,cAAc;IAC9B,MAAME,IAAI,CAACE,IAAI,CAAC,CAAC;;IAEjB;IACAX,GAAG,CAACY,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEG,OAAO,EAAE;IAAgC,CAAC,CAAC;EACpE,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd;IACAjB,GAAG,CAACY,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEG,OAAO,EAAE;IAA0B,CAAC,CAAC;EAC9D;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}